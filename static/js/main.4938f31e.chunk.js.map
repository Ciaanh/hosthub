{"version":3,"sources":["config/githubapi.js","config/config.js","App.js","serviceWorker.js","index.js"],"names":["GithubAPi","username","repo","branch","this","name","callback","Octokat","repos","indexOf","contents","fetch","ref","err","result","sha","content","JSON","parse","atob","data","token","targetBranch","changes","btoa","stringify","message","add","res","Config","props","state","config","undefined","React","db_name","update","path","current","value","id","console","log","get","description","users","newState","setState","userIndex","active","event","keyCode","currentTarget","roles","push","newUser","className","type","placeholder","onClick","saveDbFile","length","map","user","join","key","checked","onChange","onChangeUserActiveState","onKeyUp","onAddRole","onAddUser","renderFile","loadDbFile","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4938f31e.chunk.js","sourcesContent":["import Octokat from \"octokat\";\r\n\r\nexport default class GithubAPi {\r\n  constructor(username, repo, branch) {\r\n    this.username = username;\r\n    this.repo = repo;\r\n    this.branch = branch;\r\n  }\r\n\r\n  get(name, callback) {\r\n    var repo = new Octokat().repos(this.username, this.repo);\r\n\r\n    if (name.indexOf(\".json\") !== -1) {\r\n      repo.contents(name).fetch(\r\n        {\r\n          ref: this.branch\r\n        },\r\n        function(err, result) {\r\n          if (err) return callback(err);\r\n          callback(err, {\r\n            name: name,\r\n            sha: result.sha,\r\n            content: JSON.parse(atob(result.content))\r\n          });\r\n        }\r\n      );\r\n    } else {\r\n      return callback(\"File type not supported.\");\r\n    }\r\n  }\r\n\r\n  update(name, data, token, callback) {\r\n    var repo = new Octokat({ token: token }).repos(this.username, this.repo);\r\n    var targetBranch = this.branch;\r\n\r\n    repo.contents(name).fetch(\r\n      {\r\n        ref: targetBranch\r\n      },\r\n      function(err, result) {\r\n        if (err) return callback(err);\r\n\r\n        var changes = {\r\n          branch: targetBranch,\r\n          sha: result.sha,\r\n          content: btoa(JSON.stringify(data)),\r\n          message: \"updated\"\r\n        };\r\n\r\n        repo.contents(name).add(changes, function(err, res) {\r\n          callback(err, res, name);\r\n        });\r\n      }\r\n    );\r\n  }\r\n}\r\n","import * as React from \"react\";\r\n\r\nimport \"./config.css\";\r\nimport GithubAPi from \"./githubapi\";\r\n\r\nexport default class Config extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { config: undefined };\r\n    this.token = React.createRef();\r\n    this.db_name = \"sample.json\";\r\n  }\r\n\r\n  saveDbFile() {\r\n    var githubApi = new GithubAPi(\"ciaanh\", \"hosthub\", \"db\");\r\n    githubApi.update(\r\n      this.state.config.path,\r\n      this.state.config.data,\r\n      this.token.current.value,\r\n      function(err, result, id) {\r\n        if (!err) {\r\n          console.log(result);\r\n          console.log(id);\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  loadDbFile() {\r\n    var githubApi = new GithubAPi(\"ciaanh\", \"hosthub\", \"db\");\r\n    githubApi.get(this.db_name, (err, res) => {\r\n      if (res === null || res === undefined || res === \"\") {\r\n        res = {\r\n          description: \"Config description\",\r\n          name: \"my config\",\r\n          users: []\r\n        };\r\n      }\r\n\r\n      let newState = { ...this.state };\r\n      newState.config = {\r\n        path: this.db_name,\r\n        data: res.content\r\n      };\r\n      this.setState(newState);\r\n    });\r\n  }\r\n\r\n  onChangeUserActiveState(userIndex) {\r\n    let newState = { ...this.state };\r\n    newState.config.data.users[userIndex].active = !newState.config.data.users[\r\n      userIndex\r\n    ].active;\r\n\r\n    this.setState(newState);\r\n  }\r\n\r\n  onAddRole(event, userIndex) {\r\n    if (event.keyCode === 13 && event.currentTarget.value !== \"\") {\r\n      let newState = { ...this.state };\r\n      newState.config.data.users[userIndex].roles.push(\r\n        event.currentTarget.value\r\n      );\r\n      this.setState(newState);\r\n      event.currentTarget.value = \"\";\r\n    }\r\n  }\r\n\r\n  onAddUser(event) {\r\n    if (event.keyCode === 13 && event.currentTarget.value !== \"\") {\r\n      let newUser = {\r\n        name: event.currentTarget.value,\r\n        active: true,\r\n        roles: []\r\n      };\r\n\r\n      let newState = { ...this.state };\r\n      newState.config.data.users.push(newUser);\r\n      this.setState(newState);\r\n      event.currentTarget.value = \"\";\r\n    }\r\n  }\r\n\r\n  renderFile(config) {\r\n    return (\r\n      <React.Fragment>\r\n        <h1>\r\n          Config name : {config.data.name} ({config.path})\r\n        </h1>{\" \"}\r\n        <p>{config.data.description}</p>\r\n        <div className=\"userlist\">\r\n          <span>User List :</span>\r\n          <br />\r\n          <input\r\n            ref={this.token}\r\n            className=\"token\"\r\n            type=\"text\"\r\n            placeholder=\"Token\"\r\n          />\r\n          <input\r\n            className=\"save\"\r\n            type=\"button\"\r\n            value=\"Save the configuration\"\r\n            onClick={() => this.saveDbFile()}\r\n          />\r\n          <ul className=\"grid-container\">\r\n            {config.data.users && config.data.users.length > 0\r\n              ? config.data.users.map((user, userIndex) => {\r\n                  let roles =\r\n                    user.roles && user.roles.length > 0\r\n                      ? user.roles.join(\",\")\r\n                      : null;\r\n\r\n                  return (\r\n                    <li className=\"grid-item\" key={userIndex}>\r\n                      {user.name}\r\n                      <br />\r\n                      Is active :{\" \"}\r\n                      <input\r\n                        type=\"checkbox\"\r\n                        checked={user.active}\r\n                        onChange={() => this.onChangeUserActiveState(userIndex)}\r\n                      />\r\n                      <br />\r\n                      Roles : {roles}\r\n                      <br />\r\n                      <input\r\n                        className=\"addrole\"\r\n                        type=\"text\"\r\n                        placeholder=\"Add Role\"\r\n                        onKeyUp={event => this.onAddRole(event, userIndex)}\r\n                      />\r\n                    </li>\r\n                  );\r\n                })\r\n              : null}\r\n          </ul>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Add User\"\r\n            onKeyUp={event => this.onAddUser(event)}\r\n          />\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.state.config !== null && this.state.config !== undefined ? (\r\n          this.renderFile(this.state.config)\r\n        ) : (\r\n          <React.Fragment>\r\n            <span>No data to display ¯\\_(ツ)_/¯</span>\r\n            <br />\r\n            <input\r\n              className=\"load\"\r\n              type=\"button\"\r\n              onClick={event => this.loadDbFile(event)}\r\n              value=\"Load file\"\r\n            />\r\n          </React.Fragment>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\n//import logo from './logo.svg';\nimport './App.css';\n\nimport Config from \"./config/config\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Config></Config>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}